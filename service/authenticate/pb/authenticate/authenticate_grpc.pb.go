// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: authenticate.proto

package authenticate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MailCheckCode_VerifyMailCheckCode_FullMethodName = "/authenticate.MailCheckCode/VerifyMailCheckCode"
	MailCheckCode_FinishMailCheck_FullMethodName     = "/authenticate.MailCheckCode/FinishMailCheck"
)

// MailCheckCodeClient is the client API for MailCheckCode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 邮箱验证码校验
type MailCheckCodeClient interface {
	// 校验
	VerifyMailCheckCode(ctx context.Context, in *VerifyMailCheckCodeReq, opts ...grpc.CallOption) (*VerifyMailCheckCodeResp, error)
	// 邮箱验证码校验完毕
	FinishMailCheck(ctx context.Context, in *FinishMailCheckReq, opts ...grpc.CallOption) (*FinishMailCheckResp, error)
}

type mailCheckCodeClient struct {
	cc grpc.ClientConnInterface
}

func NewMailCheckCodeClient(cc grpc.ClientConnInterface) MailCheckCodeClient {
	return &mailCheckCodeClient{cc}
}

func (c *mailCheckCodeClient) VerifyMailCheckCode(ctx context.Context, in *VerifyMailCheckCodeReq, opts ...grpc.CallOption) (*VerifyMailCheckCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyMailCheckCodeResp)
	err := c.cc.Invoke(ctx, MailCheckCode_VerifyMailCheckCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailCheckCodeClient) FinishMailCheck(ctx context.Context, in *FinishMailCheckReq, opts ...grpc.CallOption) (*FinishMailCheckResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinishMailCheckResp)
	err := c.cc.Invoke(ctx, MailCheckCode_FinishMailCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailCheckCodeServer is the server API for MailCheckCode service.
// All implementations must embed UnimplementedMailCheckCodeServer
// for forward compatibility
//
// 邮箱验证码校验
type MailCheckCodeServer interface {
	// 校验
	VerifyMailCheckCode(context.Context, *VerifyMailCheckCodeReq) (*VerifyMailCheckCodeResp, error)
	// 邮箱验证码校验完毕
	FinishMailCheck(context.Context, *FinishMailCheckReq) (*FinishMailCheckResp, error)
	mustEmbedUnimplementedMailCheckCodeServer()
}

// UnimplementedMailCheckCodeServer must be embedded to have forward compatible implementations.
type UnimplementedMailCheckCodeServer struct {
}

func (UnimplementedMailCheckCodeServer) VerifyMailCheckCode(context.Context, *VerifyMailCheckCodeReq) (*VerifyMailCheckCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMailCheckCode not implemented")
}
func (UnimplementedMailCheckCodeServer) FinishMailCheck(context.Context, *FinishMailCheckReq) (*FinishMailCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishMailCheck not implemented")
}
func (UnimplementedMailCheckCodeServer) mustEmbedUnimplementedMailCheckCodeServer() {}

// UnsafeMailCheckCodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailCheckCodeServer will
// result in compilation errors.
type UnsafeMailCheckCodeServer interface {
	mustEmbedUnimplementedMailCheckCodeServer()
}

func RegisterMailCheckCodeServer(s grpc.ServiceRegistrar, srv MailCheckCodeServer) {
	s.RegisterService(&MailCheckCode_ServiceDesc, srv)
}

func _MailCheckCode_VerifyMailCheckCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMailCheckCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailCheckCodeServer).VerifyMailCheckCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailCheckCode_VerifyMailCheckCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailCheckCodeServer).VerifyMailCheckCode(ctx, req.(*VerifyMailCheckCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailCheckCode_FinishMailCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishMailCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailCheckCodeServer).FinishMailCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailCheckCode_FinishMailCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailCheckCodeServer).FinishMailCheck(ctx, req.(*FinishMailCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MailCheckCode_ServiceDesc is the grpc.ServiceDesc for MailCheckCode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailCheckCode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authenticate.MailCheckCode",
	HandlerType: (*MailCheckCodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyMailCheckCode",
			Handler:    _MailCheckCode_VerifyMailCheckCode_Handler,
		},
		{
			MethodName: "FinishMailCheck",
			Handler:    _MailCheckCode_FinishMailCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authenticate.proto",
}
