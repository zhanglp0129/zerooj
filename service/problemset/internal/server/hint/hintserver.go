// Code generated by goctl. DO NOT EDIT.
// Source: problemset.proto

package server

import (
	"context"

	"zerooj/service/problemset/internal/logic/hint"
	"zerooj/service/problemset/internal/svc"
	"zerooj/service/problemset/pb/problemset"
)

type HintServer struct {
	svcCtx *svc.ServiceContext
	problemset.UnimplementedHintServer
}

func NewHintServer(svcCtx *svc.ServiceContext) *HintServer {
	return &HintServer{
		svcCtx: svcCtx,
	}
}

// 添加提示，客服权限
func (s *HintServer) AddHint(ctx context.Context, in *problemset.AddHintReq) (*problemset.AddHintResp, error) {
	l := hintlogic.NewAddHintLogic(ctx, s.svcCtx)
	return l.AddHint(in)
}

// 删除提示，客服权限
func (s *HintServer) DeleteHint(ctx context.Context, in *problemset.DeleteHintReq) (*problemset.DeleteHintResp, error) {
	l := hintlogic.NewDeleteHintLogic(ctx, s.svcCtx)
	return l.DeleteHint(in)
}

// 修改提示，客服权限
func (s *HintServer) UpdateHint(ctx context.Context, in *problemset.UpdateHintReq) (*problemset.UpdateHintResp, error) {
	l := hintlogic.NewUpdateHintLogic(ctx, s.svcCtx)
	return l.UpdateHint(in)
}

// 获取提示
func (s *HintServer) GetHint(ctx context.Context, in *problemset.GetHintReq) (*problemset.GetHintResp, error) {
	l := hintlogic.NewGetHintLogic(ctx, s.svcCtx)
	return l.GetHint(in)
}

// 获取题目所有提示
func (s *HintServer) GetProblemHints(ctx context.Context, in *problemset.GetProblemHintsReq) (*problemset.GetProblemHintsResp, error) {
	l := hintlogic.NewGetProblemHintsLogic(ctx, s.svcCtx)
	return l.GetProblemHints(in)
}
