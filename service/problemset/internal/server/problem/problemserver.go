// Code generated by goctl. DO NOT EDIT.
// Source: problemset.proto

package server

import (
	"context"

	"zerooj/service/problemset/internal/logic/problem"
	"zerooj/service/problemset/internal/svc"
	"zerooj/service/problemset/pb/problemset"
)

type ProblemServer struct {
	svcCtx *svc.ServiceContext
	problemset.UnimplementedProblemServer
}

func NewProblemServer(svcCtx *svc.ServiceContext) *ProblemServer {
	return &ProblemServer{
		svcCtx: svcCtx,
	}
}

// 添加问题
func (s *ProblemServer) AddProblem(ctx context.Context, in *problemset.AddProblemReq) (*problemset.AddProblemResp, error) {
	l := problemlogic.NewAddProblemLogic(ctx, s.svcCtx)
	return l.AddProblem(in)
}

// 删除问题
func (s *ProblemServer) DeleteProblem(ctx context.Context, in *problemset.DeleteProblemReq) (*problemset.DeleteProblemResp, error) {
	l := problemlogic.NewDeleteProblemLogic(ctx, s.svcCtx)
	return l.DeleteProblem(in)
}

// 获取问题信息，可缓存
func (s *ProblemServer) GetProblemContent(ctx context.Context, in *problemset.GetProblemContentReq) (*problemset.GetProblemContentResp, error) {
	l := problemlogic.NewGetProblemContentLogic(ctx, s.svcCtx)
	return l.GetProblemContent(in)
}

// 更新问题
func (s *ProblemServer) UpdateProblem(ctx context.Context, in *problemset.UpdateProblemReq) (*problemset.UpdateProblemResp, error) {
	l := problemlogic.NewUpdateProblemLogic(ctx, s.svcCtx)
	return l.UpdateProblem(in)
}

// 分页搜索题目
func (s *ProblemServer) SearchProblem(ctx context.Context, in *problemset.SearchProblemReq) (*problemset.SearchProblemResp, error) {
	l := problemlogic.NewSearchProblemLogic(ctx, s.svcCtx)
	return l.SearchProblem(in)
}
