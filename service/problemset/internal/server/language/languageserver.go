// Code generated by goctl. DO NOT EDIT.
// Source: problemset.proto

package server

import (
	"context"

	"zerooj/service/problemset/internal/logic/language"
	"zerooj/service/problemset/internal/svc"
	"zerooj/service/problemset/pb/problemset"
)

type LanguageServer struct {
	svcCtx *svc.ServiceContext
	problemset.UnimplementedLanguageServer
}

func NewLanguageServer(svcCtx *svc.ServiceContext) *LanguageServer {
	return &LanguageServer{
		svcCtx: svcCtx,
	}
}

// 添加语言
func (s *LanguageServer) AddLanguage(ctx context.Context, in *problemset.AddLanguageReq) (*problemset.AddLanguageResp, error) {
	l := languagelogic.NewAddLanguageLogic(ctx, s.svcCtx)
	return l.AddLanguage(in)
}

// 删除语言
func (s *LanguageServer) DeleteLanguage(ctx context.Context, in *problemset.DeleteLanguageReq) (*problemset.DeleteLanguageResp, error) {
	l := languagelogic.NewDeleteLanguageLogic(ctx, s.svcCtx)
	return l.DeleteLanguage(in)
}

// 更新语言
func (s *LanguageServer) UpdateLanguage(ctx context.Context, in *problemset.UpdateLanguageReq) (*problemset.UpdateLanguageResp, error) {
	l := languagelogic.NewUpdateLanguageLogic(ctx, s.svcCtx)
	return l.UpdateLanguage(in)
}

// 获取所有语言
func (s *LanguageServer) GetLanguage(ctx context.Context, in *problemset.GetLanguageReq) (*problemset.GetLanguageResp, error) {
	l := languagelogic.NewGetLanguageLogic(ctx, s.svcCtx)
	return l.GetLanguage(in)
}
