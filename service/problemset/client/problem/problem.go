// Code generated by goctl. DO NOT EDIT.
// Source: problemset.proto

package problem

import (
	"context"

	"zerooj/service/problemset/pb/problemset"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddExampleReq          = problemset.AddExampleReq
	AddExampleResp         = problemset.AddExampleResp
	AddHintReq             = problemset.AddHintReq
	AddHintResp            = problemset.AddHintResp
	AddJudgeDataReq        = problemset.AddJudgeDataReq
	AddJudgeDataResp       = problemset.AddJudgeDataResp
	AddProblemReq          = problemset.AddProblemReq
	AddProblemResp         = problemset.AddProblemResp
	AddTagsReq             = problemset.AddTagsReq
	AddTagsResp            = problemset.AddTagsResp
	DeleteExampleReq       = problemset.DeleteExampleReq
	DeleteExampleResp      = problemset.DeleteExampleResp
	DeleteHintReq          = problemset.DeleteHintReq
	DeleteHintResp         = problemset.DeleteHintResp
	DeleteJudgeDataReq     = problemset.DeleteJudgeDataReq
	DeleteJudgeDataResp    = problemset.DeleteJudgeDataResp
	DeleteProblemReq       = problemset.DeleteProblemReq
	DeleteProblemResp      = problemset.DeleteProblemResp
	DeleteTagsReq          = problemset.DeleteTagsReq
	DeleteTagsResp         = problemset.DeleteTagsResp
	ExampleInfo            = problemset.ExampleInfo
	GetAllTagsReq          = problemset.GetAllTagsReq
	GetAllTagsResp         = problemset.GetAllTagsResp
	GetExampleReq          = problemset.GetExampleReq
	GetExampleResp         = problemset.GetExampleResp
	GetHintReq             = problemset.GetHintReq
	GetHintResp            = problemset.GetHintResp
	GetJudgeDataReq        = problemset.GetJudgeDataReq
	GetJudgeDataResp       = problemset.GetJudgeDataResp
	GetProblemContentReq   = problemset.GetProblemContentReq
	GetProblemContentResp  = problemset.GetProblemContentResp
	GetProblemExamplesReq  = problemset.GetProblemExamplesReq
	GetProblemExamplesResp = problemset.GetProblemExamplesResp
	GetProblemHintsReq     = problemset.GetProblemHintsReq
	GetProblemHintsResp    = problemset.GetProblemHintsResp
	GetProblemTagsReq      = problemset.GetProblemTagsReq
	GetProblemTagsResp     = problemset.GetProblemTagsResp
	HintInfo               = problemset.HintInfo
	JudgeDataInfo          = problemset.JudgeDataInfo
	MustDeleteTagsReq      = problemset.MustDeleteTagsReq
	MustDeleteTagsResp     = problemset.MustDeleteTagsResp
	ProblemAddTagsReq      = problemset.ProblemAddTagsReq
	ProblemAddTagsResp     = problemset.ProblemAddTagsResp
	ProblemDeleteTagsReq   = problemset.ProblemDeleteTagsReq
	ProblemDeleteTagsResp  = problemset.ProblemDeleteTagsResp
	SearchProblemReq       = problemset.SearchProblemReq
	SearchProblemResp      = problemset.SearchProblemResp
	TagInfo                = problemset.TagInfo
	UpdateExampleReq       = problemset.UpdateExampleReq
	UpdateExampleResp      = problemset.UpdateExampleResp
	UpdateHintReq          = problemset.UpdateHintReq
	UpdateHintResp         = problemset.UpdateHintResp
	UpdateJudgeDataReq     = problemset.UpdateJudgeDataReq
	UpdateJudgeDataResp    = problemset.UpdateJudgeDataResp
	UpdateProblemReq       = problemset.UpdateProblemReq
	UpdateProblemResp      = problemset.UpdateProblemResp
	UpdateTagsReq          = problemset.UpdateTagsReq
	UpdateTagsResp         = problemset.UpdateTagsResp

	Problem interface {
		// 添加问题，客服权限
		AddProblem(ctx context.Context, in *AddProblemReq, opts ...grpc.CallOption) (*AddProblemResp, error)
		// 删除问题，客服权限
		DeleteProblem(ctx context.Context, in *DeleteProblemReq, opts ...grpc.CallOption) (*DeleteProblemResp, error)
		// 获取问题信息，可缓存
		GetProblemContent(ctx context.Context, in *GetProblemContentReq, opts ...grpc.CallOption) (*GetProblemContentResp, error)
		// 更新问题，客服权限
		UpdateProblem(ctx context.Context, in *UpdateProblemReq, opts ...grpc.CallOption) (*UpdateProblemResp, error)
		// 分页搜索题目
		SearchProblem(ctx context.Context, in *SearchProblemReq, opts ...grpc.CallOption) (*SearchProblemResp, error)
	}

	defaultProblem struct {
		cli zrpc.Client
	}
)

func NewProblem(cli zrpc.Client) Problem {
	return &defaultProblem{
		cli: cli,
	}
}

// 添加问题，客服权限
func (m *defaultProblem) AddProblem(ctx context.Context, in *AddProblemReq, opts ...grpc.CallOption) (*AddProblemResp, error) {
	client := problemset.NewProblemClient(m.cli.Conn())
	return client.AddProblem(ctx, in, opts...)
}

// 删除问题，客服权限
func (m *defaultProblem) DeleteProblem(ctx context.Context, in *DeleteProblemReq, opts ...grpc.CallOption) (*DeleteProblemResp, error) {
	client := problemset.NewProblemClient(m.cli.Conn())
	return client.DeleteProblem(ctx, in, opts...)
}

// 获取问题信息，可缓存
func (m *defaultProblem) GetProblemContent(ctx context.Context, in *GetProblemContentReq, opts ...grpc.CallOption) (*GetProblemContentResp, error) {
	client := problemset.NewProblemClient(m.cli.Conn())
	return client.GetProblemContent(ctx, in, opts...)
}

// 更新问题，客服权限
func (m *defaultProblem) UpdateProblem(ctx context.Context, in *UpdateProblemReq, opts ...grpc.CallOption) (*UpdateProblemResp, error) {
	client := problemset.NewProblemClient(m.cli.Conn())
	return client.UpdateProblem(ctx, in, opts...)
}

// 分页搜索题目
func (m *defaultProblem) SearchProblem(ctx context.Context, in *SearchProblemReq, opts ...grpc.CallOption) (*SearchProblemResp, error) {
	client := problemset.NewProblemClient(m.cli.Conn())
	return client.SearchProblem(ctx, in, opts...)
}
