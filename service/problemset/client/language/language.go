// Code generated by goctl. DO NOT EDIT.
// Source: problemset.proto

package language

import (
	"context"

	"zerooj/service/problemset/pb/problemset"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddExampleReq             = problemset.AddExampleReq
	AddExampleResp            = problemset.AddExampleResp
	AddHintReq                = problemset.AddHintReq
	AddHintResp               = problemset.AddHintResp
	AddJudgeDataReq           = problemset.AddJudgeDataReq
	AddJudgeDataResp          = problemset.AddJudgeDataResp
	AddLanguageReq            = problemset.AddLanguageReq
	AddLanguageResp           = problemset.AddLanguageResp
	AddProblemReq             = problemset.AddProblemReq
	AddProblemResp            = problemset.AddProblemResp
	AddTagsReq                = problemset.AddTagsReq
	AddTagsResp               = problemset.AddTagsResp
	DeleteExampleReq          = problemset.DeleteExampleReq
	DeleteExampleResp         = problemset.DeleteExampleResp
	DeleteHintReq             = problemset.DeleteHintReq
	DeleteHintResp            = problemset.DeleteHintResp
	DeleteJudgeDataReq        = problemset.DeleteJudgeDataReq
	DeleteJudgeDataResp       = problemset.DeleteJudgeDataResp
	DeleteLanguageReq         = problemset.DeleteLanguageReq
	DeleteLanguageResp        = problemset.DeleteLanguageResp
	DeleteProblemReq          = problemset.DeleteProblemReq
	DeleteProblemResp         = problemset.DeleteProblemResp
	DeleteTagsReq             = problemset.DeleteTagsReq
	DeleteTagsResp            = problemset.DeleteTagsResp
	ExampleInfo               = problemset.ExampleInfo
	GetAllTagsReq             = problemset.GetAllTagsReq
	GetAllTagsResp            = problemset.GetAllTagsResp
	GetExampleReq             = problemset.GetExampleReq
	GetExampleResp            = problemset.GetExampleResp
	GetHintReq                = problemset.GetHintReq
	GetHintResp               = problemset.GetHintResp
	GetJudgeDataReq           = problemset.GetJudgeDataReq
	GetJudgeDataResp          = problemset.GetJudgeDataResp
	GetLanguageReq            = problemset.GetLanguageReq
	GetLanguageResp           = problemset.GetLanguageResp
	GetProblemContentReq      = problemset.GetProblemContentReq
	GetProblemContentResp     = problemset.GetProblemContentResp
	GetProblemExamplesReq     = problemset.GetProblemExamplesReq
	GetProblemExamplesResp    = problemset.GetProblemExamplesResp
	GetProblemHintsReq        = problemset.GetProblemHintsReq
	GetProblemHintsResp       = problemset.GetProblemHintsResp
	GetProblemSubmitCountReq  = problemset.GetProblemSubmitCountReq
	GetProblemSubmitCountResp = problemset.GetProblemSubmitCountResp
	GetProblemTagsReq         = problemset.GetProblemTagsReq
	GetProblemTagsResp        = problemset.GetProblemTagsResp
	GetSubmitByIdReq          = problemset.GetSubmitByIdReq
	GetSubmitByIdResp         = problemset.GetSubmitByIdResp
	GetUserProblemSubmitReq   = problemset.GetUserProblemSubmitReq
	GetUserProblemSubmitResp  = problemset.GetUserProblemSubmitResp
	GetUserSubmitReq          = problemset.GetUserSubmitReq
	GetUserSubmitResp         = problemset.GetUserSubmitResp
	HintInfo                  = problemset.HintInfo
	JudgeDataInfo             = problemset.JudgeDataInfo
	LanguageInfo              = problemset.LanguageInfo
	MustDeleteTagsReq         = problemset.MustDeleteTagsReq
	MustDeleteTagsResp        = problemset.MustDeleteTagsResp
	ProblemAddTagsReq         = problemset.ProblemAddTagsReq
	ProblemAddTagsResp        = problemset.ProblemAddTagsResp
	ProblemDeleteTagsReq      = problemset.ProblemDeleteTagsReq
	ProblemDeleteTagsResp     = problemset.ProblemDeleteTagsResp
	SearchProblemReq          = problemset.SearchProblemReq
	SearchProblemResp         = problemset.SearchProblemResp
	SubmitCodeReq             = problemset.SubmitCodeReq
	SubmitCodeResp            = problemset.SubmitCodeResp
	SubmitInfo                = problemset.SubmitInfo
	TagInfo                   = problemset.TagInfo
	UpdateExampleReq          = problemset.UpdateExampleReq
	UpdateExampleResp         = problemset.UpdateExampleResp
	UpdateHintReq             = problemset.UpdateHintReq
	UpdateHintResp            = problemset.UpdateHintResp
	UpdateJudgeDataReq        = problemset.UpdateJudgeDataReq
	UpdateJudgeDataResp       = problemset.UpdateJudgeDataResp
	UpdateLanguageReq         = problemset.UpdateLanguageReq
	UpdateLanguageResp        = problemset.UpdateLanguageResp
	UpdateProblemReq          = problemset.UpdateProblemReq
	UpdateProblemResp         = problemset.UpdateProblemResp
	UpdateTagsReq             = problemset.UpdateTagsReq
	UpdateTagsResp            = problemset.UpdateTagsResp

	Language interface {
		// 添加语言，客服权限
		AddLanguage(ctx context.Context, in *AddLanguageReq, opts ...grpc.CallOption) (*AddLanguageResp, error)
		// 删除语言，客服权限
		DeleteLanguage(ctx context.Context, in *DeleteLanguageReq, opts ...grpc.CallOption) (*DeleteLanguageResp, error)
		// 更新语言，客服权限
		UpdateLanguage(ctx context.Context, in *UpdateLanguageReq, opts ...grpc.CallOption) (*UpdateLanguageResp, error)
		// 获取所有语言
		GetLanguage(ctx context.Context, in *GetLanguageReq, opts ...grpc.CallOption) (*GetLanguageResp, error)
	}

	defaultLanguage struct {
		cli zrpc.Client
	}
)

func NewLanguage(cli zrpc.Client) Language {
	return &defaultLanguage{
		cli: cli,
	}
}

// 添加语言，客服权限
func (m *defaultLanguage) AddLanguage(ctx context.Context, in *AddLanguageReq, opts ...grpc.CallOption) (*AddLanguageResp, error) {
	client := problemset.NewLanguageClient(m.cli.Conn())
	return client.AddLanguage(ctx, in, opts...)
}

// 删除语言，客服权限
func (m *defaultLanguage) DeleteLanguage(ctx context.Context, in *DeleteLanguageReq, opts ...grpc.CallOption) (*DeleteLanguageResp, error) {
	client := problemset.NewLanguageClient(m.cli.Conn())
	return client.DeleteLanguage(ctx, in, opts...)
}

// 更新语言，客服权限
func (m *defaultLanguage) UpdateLanguage(ctx context.Context, in *UpdateLanguageReq, opts ...grpc.CallOption) (*UpdateLanguageResp, error) {
	client := problemset.NewLanguageClient(m.cli.Conn())
	return client.UpdateLanguage(ctx, in, opts...)
}

// 获取所有语言
func (m *defaultLanguage) GetLanguage(ctx context.Context, in *GetLanguageReq, opts ...grpc.CallOption) (*GetLanguageResp, error) {
	client := problemset.NewLanguageClient(m.cli.Conn())
	return client.GetLanguage(ctx, in, opts...)
}
