// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"zerooj/service/user/internal/logic/other"
	"zerooj/service/user/internal/svc"
	"zerooj/service/user/pb/user"
)

type OtherServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedOtherServer
}

func NewOtherServer(svcCtx *svc.ServiceContext) *OtherServer {
	return &OtherServer{
		svcCtx: svcCtx,
	}
}

// 添加和删除城市，只有客服能操作
func (s *OtherServer) AddCity(ctx context.Context, in *user.AddCityReq) (*user.AddCityResp, error) {
	l := otherlogic.NewAddCityLogic(ctx, s.svcCtx)
	return l.AddCity(in)
}

func (s *OtherServer) DeleteCity(ctx context.Context, in *user.DeleteCityReq) (*user.DeleteCityResp, error) {
	l := otherlogic.NewDeleteCityLogic(ctx, s.svcCtx)
	return l.DeleteCity(in)
}

// 强行删除城市，必须要管理员权限
func (s *OtherServer) MustDeleteCity(ctx context.Context, in *user.MustDeleteCityReq) (*user.MustDeleteCityResp, error) {
	l := otherlogic.NewMustDeleteCityLogic(ctx, s.svcCtx)
	return l.MustDeleteCity(in)
}

// 添加和删除技能，只有客服能操作
func (s *OtherServer) AddSkill(ctx context.Context, in *user.AddSkillReq) (*user.AddSkillResp, error) {
	l := otherlogic.NewAddSkillLogic(ctx, s.svcCtx)
	return l.AddSkill(in)
}

func (s *OtherServer) DeleteSkill(ctx context.Context, in *user.DeleteSkillReq) (*user.DeleteSkillResp, error) {
	l := otherlogic.NewDeleteSkillLogic(ctx, s.svcCtx)
	return l.DeleteSkill(in)
}

// 强行删除技能，必须要管理员权限
func (s *OtherServer) MustDeleteSkill(ctx context.Context, in *user.MustDeleteSkillReq) (*user.MustDeleteSkillResp, error) {
	l := otherlogic.NewMustDeleteSkillLogic(ctx, s.svcCtx)
	return l.MustDeleteSkill(in)
}
