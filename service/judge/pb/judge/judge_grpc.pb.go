// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: judge.proto

package judge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Judge_Judge_FullMethodName         = "/judge.Judge/Judge"
	Judge_JudgeWithData_FullMethodName = "/judge.Judge/JudgeWithData"
)

// JudgeClient is the client API for Judge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JudgeClient interface {
	// 测评，调用题库服务获取测评数据，并缓存
	Judge(ctx context.Context, opts ...grpc.CallOption) (Judge_JudgeClient, error)
	// 测评，并提供测评数据
	JudgeWithData(ctx context.Context, opts ...grpc.CallOption) (Judge_JudgeWithDataClient, error)
}

type judgeClient struct {
	cc grpc.ClientConnInterface
}

func NewJudgeClient(cc grpc.ClientConnInterface) JudgeClient {
	return &judgeClient{cc}
}

func (c *judgeClient) Judge(ctx context.Context, opts ...grpc.CallOption) (Judge_JudgeClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Judge_ServiceDesc.Streams[0], Judge_Judge_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &judgeJudgeClient{ClientStream: stream}
	return x, nil
}

type Judge_JudgeClient interface {
	Send(*JudgeReq) error
	CloseAndRecv() (*JudgeResult, error)
	grpc.ClientStream
}

type judgeJudgeClient struct {
	grpc.ClientStream
}

func (x *judgeJudgeClient) Send(m *JudgeReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *judgeJudgeClient) CloseAndRecv() (*JudgeResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(JudgeResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *judgeClient) JudgeWithData(ctx context.Context, opts ...grpc.CallOption) (Judge_JudgeWithDataClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Judge_ServiceDesc.Streams[1], Judge_JudgeWithData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &judgeJudgeWithDataClient{ClientStream: stream}
	return x, nil
}

type Judge_JudgeWithDataClient interface {
	Send(*JudgeWithDataReq) error
	CloseAndRecv() (*JudgeResult, error)
	grpc.ClientStream
}

type judgeJudgeWithDataClient struct {
	grpc.ClientStream
}

func (x *judgeJudgeWithDataClient) Send(m *JudgeWithDataReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *judgeJudgeWithDataClient) CloseAndRecv() (*JudgeResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(JudgeResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JudgeServer is the server API for Judge service.
// All implementations must embed UnimplementedJudgeServer
// for forward compatibility
type JudgeServer interface {
	// 测评，调用题库服务获取测评数据，并缓存
	Judge(Judge_JudgeServer) error
	// 测评，并提供测评数据
	JudgeWithData(Judge_JudgeWithDataServer) error
	mustEmbedUnimplementedJudgeServer()
}

// UnimplementedJudgeServer must be embedded to have forward compatible implementations.
type UnimplementedJudgeServer struct {
}

func (UnimplementedJudgeServer) Judge(Judge_JudgeServer) error {
	return status.Errorf(codes.Unimplemented, "method Judge not implemented")
}
func (UnimplementedJudgeServer) JudgeWithData(Judge_JudgeWithDataServer) error {
	return status.Errorf(codes.Unimplemented, "method JudgeWithData not implemented")
}
func (UnimplementedJudgeServer) mustEmbedUnimplementedJudgeServer() {}

// UnsafeJudgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JudgeServer will
// result in compilation errors.
type UnsafeJudgeServer interface {
	mustEmbedUnimplementedJudgeServer()
}

func RegisterJudgeServer(s grpc.ServiceRegistrar, srv JudgeServer) {
	s.RegisterService(&Judge_ServiceDesc, srv)
}

func _Judge_Judge_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JudgeServer).Judge(&judgeJudgeServer{ServerStream: stream})
}

type Judge_JudgeServer interface {
	SendAndClose(*JudgeResult) error
	Recv() (*JudgeReq, error)
	grpc.ServerStream
}

type judgeJudgeServer struct {
	grpc.ServerStream
}

func (x *judgeJudgeServer) SendAndClose(m *JudgeResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *judgeJudgeServer) Recv() (*JudgeReq, error) {
	m := new(JudgeReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Judge_JudgeWithData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JudgeServer).JudgeWithData(&judgeJudgeWithDataServer{ServerStream: stream})
}

type Judge_JudgeWithDataServer interface {
	SendAndClose(*JudgeResult) error
	Recv() (*JudgeWithDataReq, error)
	grpc.ServerStream
}

type judgeJudgeWithDataServer struct {
	grpc.ServerStream
}

func (x *judgeJudgeWithDataServer) SendAndClose(m *JudgeResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *judgeJudgeWithDataServer) Recv() (*JudgeWithDataReq, error) {
	m := new(JudgeWithDataReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Judge_ServiceDesc is the grpc.ServiceDesc for Judge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Judge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "judge.Judge",
	HandlerType: (*JudgeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Judge",
			Handler:       _Judge_Judge_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "JudgeWithData",
			Handler:       _Judge_JudgeWithData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "judge.proto",
}
