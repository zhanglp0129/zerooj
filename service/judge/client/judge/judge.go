// Code generated by goctl. DO NOT EDIT.
// Source: judge.proto

package judge

import (
	"context"

	"zerooj/service/judge/pb/judge"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	JudgeData        = judge.JudgeData
	JudgeReq         = judge.JudgeReq
	JudgeResult      = judge.JudgeResult
	JudgeWithDataReq = judge.JudgeWithDataReq

	Judge interface {
		// 测评，调用题库服务获取测评数据，并缓存
		Judge(ctx context.Context, opts ...grpc.CallOption) (judge.Judge_JudgeClient, error)
		// 测评，并提供测评数据
		JudgeWithData(ctx context.Context, opts ...grpc.CallOption) (judge.Judge_JudgeWithDataClient, error)
	}

	defaultJudge struct {
		cli zrpc.Client
	}
)

func NewJudge(cli zrpc.Client) Judge {
	return &defaultJudge{
		cli: cli,
	}
}

// 测评，调用题库服务获取测评数据，并缓存
func (m *defaultJudge) Judge(ctx context.Context, opts ...grpc.CallOption) (judge.Judge_JudgeClient, error) {
	client := judge.NewJudgeClient(m.cli.Conn())
	return client.Judge(ctx, opts...)
}

// 测评，并提供测评数据
func (m *defaultJudge) JudgeWithData(ctx context.Context, opts ...grpc.CallOption) (judge.Judge_JudgeWithDataClient, error) {
	client := judge.NewJudgeClient(m.cli.Conn())
	return client.JudgeWithData(ctx, opts...)
}
